require 'rails_helper'

RSpec.describe InvoiceItem, type: :model do
  describe 'relationships' do
    it {should belong_to(:item)}
    it {should belong_to(:invoice)}
    it {should have_many(:merchants).through(:item)}
    it {should have_many(:bulk_discounts).through(:merchants)}
  end

  describe 'validations' do
    it { should define_enum_for(:status).with_values([:pending, :packaged, :shipped]) }
  end

  before :each do
    @merchant = Merchant.create!(name: 'BuyMyThings')
    @merchant2 = Merchant.create!(name: 'BuyMyThings')
    @customer1 = Customer.create!(first_name: 'Tired', last_name: 'Person')
    @customer2 = Customer.create!(first_name: 'Tired', last_name: 'Person')

    @invoice1 =Invoice.create!(status: 0, customer_id: @customer1.id)
    @invoice2 =Invoice.create!(status: 0, customer_id: @customer1.id)
    @invoice3 =Invoice.create!(status: 0, customer_id: @customer2.id)

    @item1 = Item.create!(name: 'food', description: 'delicious', unit_price: '2000', merchant_id: @merchant.id)
    @item2 = Item.create!(name: 'more food', description: 'even more delicious', unit_price: '3000', merchant_id: @merchant.id)
    @item3 = Item.create!(name: 'not food at all', description: 'definitely not food', unit_price: '1500', merchant_id: @merchant2.id)

    @invoice_item1 = InvoiceItem.create!(item_id: @item1.id, invoice_id: @invoice1.id, quantity: 2, unit_price: 100, status: 1)
    @invoice_item2 = InvoiceItem.create!(item_id: @item2.id, invoice_id: @invoice2.id, quantity: 2, unit_price: 400, status: 0)
    @invoice_item3 = InvoiceItem.create!(item_id: @item3.id, invoice_id: @invoice3.id, quantity: 2, unit_price: 200, status: 1)
    @invoice_item4 = InvoiceItem.create!(item_id: @item2.id, invoice_id: @invoice1.id, quantity: 2, unit_price: 100, status: 2)
  end

  describe 'instance methods' do
    describe '.get_name_from_invoice' do
      it "lists items names that are on invoices" do
        expect(@invoice_item2.get_name_from_invoice).to eq("more food")
      end
      it 'will change unit price in cents to a diaplay price' do

       expect(@invoice_item4.display_price).to eq('1.00')
      end
    end
    describe '.best_discount' do
      it 'returns the possible discount for the invoice_item' do
        merchant1 = Merchant.create!(name: "Ana Maria")
        merchant2 = Merchant.create!(name: 'BuyMyThings')
        item1 = merchant1.items.create!(name: "cheese", description: "european cheese", unit_price: 2475)
        customer1 = Customer.create!(first_name: 'Fred', last_name: 'Dunce')
        invoice1 =Invoice.create!(status: 2, customer_id: customer1.id)
        invoice_item1 = InvoiceItem.create!(item_id: item1.id, invoice_id: invoice1.id, quantity: 50, unit_price: 100, status: 1)
        discount1 = merchant1.bulk_discounts.create!(percentage_discount: 5, quantity_threshold: 5)
        discount2 = merchant1.bulk_discounts.create!(percentage_discount: 50, quantity_threshold: 50)
        discount3 = merchant1.bulk_discounts.create!(percentage_discount: 60, quantity_threshold: 100)
        discount4 = merchant2.bulk_discounts.create!(percentage_discount: 70, quantity_threshold: 20)

        expect(invoice_item1.best_discount).to eq(50)
      end
    end
    describe '.item_revenue' do
      it 'finds the amount of revenue generated by that item' do
        merchant1 = Merchant.create!(name: "Ana Maria")
        merchant2 = Merchant.create!(name: "Mr. Octo")
        item1 = merchant1.items.create!(name: "cheese", description: "european cheese", unit_price: 2475)
        item2 = merchant2.items.create!(name: "cheese", description: "sea cheese", unit_price: 2475)
        customer1 = Customer.create!(first_name: 'Fred', last_name: 'Dunce')
        invoice1 =Invoice.create!(status: 2, customer_id: customer1.id)
        invoice_item1 = InvoiceItem.create!(item_id: item1.id, invoice_id: invoice1.id, quantity: 5, unit_price: 100, status: 1)
        invoice_item2 = InvoiceItem.create!(item_id: item2.id, invoice_id: invoice1.id, quantity: 5, unit_price: 100, status: 1)
        discount2 = merchant1.bulk_discounts.create!(percentage_discount: 20, quantity_threshold: 5)

        expect(invoice_item1.item_revenue).to eq(400)
        expect(invoice_item2.item_revenue).to eq(500)
      end
    end
  end
end
